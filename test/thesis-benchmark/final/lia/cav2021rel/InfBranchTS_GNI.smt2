(set-logic HORN)

(declare-fun Inv (Int Int Int Int Int Int) Bool)
(declare-fun SchTT (Int Int Int Int Int Int) Bool)
(declare-fun FN_R (Int Int Int) Bool)
(declare-fun WF_R1 (Int Int Int Int) Bool)
(declare-fun SchFT (Int Int Int Int Int Int) Bool)
(declare-fun SchTF (Int Int Int Int Int Int) Bool)
(declare-fun FN_DB (Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
       (=> (and (Inv E F D B C A)
                     (> B 0)
                     (> A 0)
                     (or (> E F) (> (- F) E) (< F 0))) false)
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int))
       (=> (and (SchTT H I G D F B) (Inv H I G D F B)
                (or (and (<= D 0) (= C D))
                    (and (> D 0) (= C (- D 1)) (not (> G 0))))
                (or (and (> B 0) (= A (- B 1)) (not (> F 0)))
                    (and (>= E 1) (> B 0) (> F 0) (= A (- B E)))
                    (and (<= B 0) (= A B)))
                   )

           (Inv H I G C F A))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int))
       (=> (and (SchTT H I G D F B)
                (Inv H I G D F B)
                (FN_R G D E)
                (> G 0)
                (or (= C (- D 1)) (and (>= E 1) (= C (- D E))))
                (or (and (> B 0) (= A (- B 1)) (not (> F 0)))
                    (and (>= E 1) (> B 0) (> F 0) (= A (- B E)))
                    (and (<= B 0) (= A B)))
                (> D 0))
           (Inv H I G C F A))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))
       (=> (and (Inv G H F C E A) (FN_R F C D) (> C 0) (> F 0) (or (= B (- C 1)) (and (>= D 1) (= B (- C D)))) (<= A 0))
           (WF_R1 F C F B))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))
  (=> (and (Inv F G E C D A) (> C 0) (= B (- C 1)) (<= A 0) (not (> E 0)))
         (WF_R1 E C E B))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int))
       (=> (and (SchFT H I F C E B)
                     (Inv H I F C E B)
                     (or (and (> B 0) (= A (- B 1)) (not (> E 0)))
                    (and (>= D 1) (> B 0) (> E 0) (= A (- B D)))
                    (and (<= B 0) (= A B)))
                     (or (= G (- H 1)) (<= C 0) (<= B 0)))
                     (Inv G I F C E A))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))
       (=>
       (and (SchTF G H E C D A)
                     (Inv G H E C D A)
                     (or (and (<= C 0) (= B C))
                    (and (> C 0) (= B (- C 1)) (not (> E 0))))
                     (or (= F (+ G 1)) (<= C 0) (<= A 0)))
                     (Inv F H E B D A))
    ))
(assert (forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E Int)
         (F Int)
         (G Int)
         (H Int)
         (I Int))
       (=>
       (and (SchTF H I F C E A)
                     (Inv H I F C E A)
                     (FN_R F C D)
                     (> F 0)
                     (= G (+ H 1))
                     (or (= G (+ H 1)) (<= C 0) (<= A 0))
                     (or (= B (- C 1)) (and (>= D 1) (= B (- C D))))
                     (> C 0))
        (Inv G I F B E A))
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (=> (and (FN_DB D B C A E) (= B A)) (Inv 0 E D B C A))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
  (=> (and (Inv E F D B C A) (or (> B 0) (> A 0)))
      (or (SchTT E F D B C A) (SchFT E F D B C A) (SchTF E F D B C A))
    )))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
  (=> (and (SchTF E F D B C A) (Inv E F D B C A) (<= B 0) (> A 0)) false)
    ))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
  (=> (and (SchFT E F D B C A) (Inv E F D B C A) (<= A 0) (> B 0)) false)
    ))


(check-sat)
(exit)
