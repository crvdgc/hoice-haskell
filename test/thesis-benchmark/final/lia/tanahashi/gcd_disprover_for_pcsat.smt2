; this should be sat
(set-logic HORN)
(declare-fun X1 (Int Int Int) Bool)
(declare-fun X2 (Int Int) Bool)
(declare-fun X3 (Int Int Int) Bool)
(declare-fun X28 (Int Int) Bool)
(declare-fun X69 () Bool)
(declare-fun X70 (Int) Bool)
(declare-fun X71 (Int Int) Bool)
(declare-fun X79 (Int Int) Bool)
(declare-fun X80 (Int Int) Bool)
(declare-fun X81 (Int Int) Bool)
(declare-fun X82 (Int Int) Bool)
(declare-fun X83 (Int Int) Bool)
(declare-fun X84 (Int Int) Bool)
(assert (forall ((x62 Int)(x63 Int)) (=> (and (<=  x62 x63) (and (>=  x62 x63) (not (=  x62 x63)))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (X83  x63 x62) (and (>=  x62 x63) (not (=  x62 x63)))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (<=  x62 x63) (and (X84  x63 x62) (not (=  x62 x63)))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (X83  x63 x62) (and (X84  x63 x62) (not (=  x62 x63)))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (<=  x62 x63) (and (>=  x62 x63) (X3  x62 x63 x62))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (X83  x63 x62) (and (>=  x62 x63) (X3  x62 x63 x62))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (<=  x62 x63) (and (X84  x63 x62) (X3  x62 x63 x62))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)) (=> (and (X83  x63 x62) (and (X84  x63 x62) (X3  x62 x63 x62))) (X2  x63 x62))))
(assert (forall ((x62 Int)(x63 Int)(x64 Int)) (=> (X1  x64 x63 x62) (or (X3  x64 x63 x62) (X2  x63 x62)))))
(assert (forall ((a11 Int)(b12 Int)) (=> (X2  (-  b12 a11) a11) (X84  b12 a11))))
(assert (forall ((a11 Int)(b12 Int)(tmp77 Int)(x61 Int)) (=> (and (=  tmp77 (-  b12 a11)) (X3  x61 b12 a11)) (or (X1  x61 tmp77 a11) (X84  b12 a11)))))
(assert (forall ((a11 Int)(b12 Int)) (=> (X2  b12 (-  a11 b12)) (X83  b12 a11))))
(assert (forall ((a11 Int)(b12 Int)(tmp78 Int)(x60 Int)) (=> (and (=  tmp78 (-  a11 b12)) (X3  x60 b12 a11)) (or (X1  x60 b12 tmp78) (X83  b12 a11)))))
(assert (forall ((x58 Int)(x59 Int)) (=> (and (X79  x59 x58) (and (X80  x59 x58) (and (X81  x59 x58) (and (X82  x59 x58) (and (X28  x59 (-  x58 1)) (X28  (-  x59 1) x58)))))) (X28  x59 x58))))
(assert (forall ((x58 Int)(x59 Int)) (=> (<  x58 0) (X28  x59 x58))))
(assert (forall ((x58 Int)(x59 Int)) (=> (<  x59 0) (X28  x59 x58))))
(assert (forall ((m6 Int)(n5 Int)) (=> (X2  (-  0 m6) (-  0 n5)) (X82  m6 n5))))
(assert (forall ((m6 Int)(n5 Int)(tmp79 Int)(tmp80 Int)(x57 Int)) (=> (and (=  tmp79 (-  0 m6)) (=  tmp80 (-  0 n5))) (or (X1  x57 tmp79 tmp80) (X82  m6 n5)))))
(assert (forall ((m6 Int)(n5 Int)) (=> (X2  m6 (-  0 n5)) (X81  m6 n5))))
(assert (forall ((m6 Int)(n5 Int)(tmp81 Int)(x56 Int)) (=> (=  tmp81 (-  0 n5)) (or (X1  x56 m6 tmp81) (X81  m6 n5)))))
(assert (forall ((m6 Int)(n5 Int)) (=> (X2  (-  0 m6) n5) (X80  m6 n5))))
(assert (forall ((m6 Int)(n5 Int)(tmp82 Int)(x55 Int)) (=> (=  tmp82 (-  0 m6)) (or (X1  x55 tmp82 n5) (X80  m6 n5)))))
(assert (forall ((m6 Int)(n5 Int)) (=> (X2  m6 n5) (X79  m6 n5))))
(assert (forall ((m6 Int)(n5 Int)(x54 Int)) (=> true (or (X1  x54 m6 n5) (X79  m6 n5)))))
(assert (forall ((n3 Int)) (=> (X70  n3) X69)))
(assert (forall ((m4 Int)(n3 Int)) (=> (X71  m4 n3) (X70  n3))))
(assert (forall ((m4 Int)(n3 Int)) (=> (and (>=  m4 1) (and (>=  n3 1) (X28  m4 n3))) (X71  m4 n3))))
(assert (=> X69 false))
(check-sat)
    
